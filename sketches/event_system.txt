struct event_t {
    std::function<Sqrat::Array*(event_t*)> encode;
    std::function<event_t*(Sqrat::Array*)> decode;
};

struct event_player_connect_t {
    std::string username;

    std::function<Sqrat::Array*(event_t*)> encode;
    std::function<event_t*(Sqrat::Array*)> decode;
};

class IEvent {
    virtual Sqrat::Array* encode() = 0;
    virtual Sqrat::Array* decode() = 0;
}

class PlayerConnectEvent : IEvent
{
public:
    PlayerConnectEvent(std::string name) : username(name) {}
    ~PlayerConnectEvent() = default;

    std::string username;
}


uint64_t event_player_connect_encode(std::string, ) {

}

struct handler_t {
    std::function<void(event_t*)> callback_cpp;
    Sqrat::Function callback_sq;
};

vm.Func("player_connect", event_player_connect_encode);




void trigger(std::string name, event_t* event, int mode = mode_both, void* vm = null)
{
    // if handler exists in map<name, vector<handler>>
    // iterate each vector element
    auto handler = eventmap[name][i];

    if (handler.callback_cpp && (mode == events::mode_cpp || mode == events::mode_both)) {
        handler.callback_cpp(event);
    }

    if (handler.callback_sq && (mode == events::mode_sq || mode == events::mode_both)) {
        handler.callback_sq->Execute(event->encode(event));
    }
}



//////
///cpp

events::add("onPlayerConnect", [] (IEvent* evt) -> {
    auto event = (PlayerConnectEvent*) evt;

    printf("hello %s", event->username);
    printf("hello %s", event->username);
});

events::trigger("onPlayerConnect", new PlayerConnectEvent("marko_polo"));
events::trigger("onPlayerConnect", new PlayerConnectEvent("marko_polo"), events::mode_cpp);
events::trigger("onPlayerConnect", new PlayerConnectEvent("marko_polo"), events::mode_sq);
events::trigger("onPlayerConnect", new PlayerConnectEvent("marko_polo"), events::mode_both);
events::trigger("onPlayerConnect", new PlayerConnectEvent("marko_polo"), events::mode_sq, vm);



///////
////sq

natives.events.add("onPlayerConnect", function(data) {
    print(format("hello %s", data[0]));
});

natives.events.trigger("onPlayerConnect", natives.events.create("player_connect", ["marko_polo"]));
